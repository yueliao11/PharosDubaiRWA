/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PropertyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balances"
      | "claimAssetYield"
      | "configureAsset"
      | "earlyCashOut"
      | "getAssetDetails"
      | "getAssetRewards"
      | "getStakedAssetBalance"
      | "getUserAssetBalance"
      | "metas"
      | "owner"
      | "redeem"
      | "renounceOwnership"
      | "rewards"
      | "rwa"
      | "stakeAsset"
      | "staked"
      | "transferOwnership"
      | "unstakeAsset"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetConfigured"
      | "EarlyCashOut"
      | "OwnershipTransferred"
      | "Redeemed"
      | "Stake"
      | "Unstake"
      | "YieldClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAssetYield",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAsset",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyCashOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetRewards",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAssetBalance",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetBalance",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "metas", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rwa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAsset",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAssetYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyCashOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rwa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeAsset",
    data: BytesLike
  ): Result;
}

export namespace AssetConfiguredEvent {
  export type InputTuple = [
    assetId: string,
    maturity: BigNumberish,
    discount: BigNumberish,
    redemption: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    maturity: bigint,
    discount: bigint,
    redemption: bigint
  ];
  export interface OutputObject {
    assetId: string;
    maturity: bigint;
    discount: bigint;
    redemption: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyCashOutEvent {
  export type InputTuple = [
    assetId: string,
    user: AddressLike,
    tokens: BigNumberish,
    stableOut: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    user: string,
    tokens: bigint,
    stableOut: bigint
  ];
  export interface OutputObject {
    assetId: string;
    user: string;
    tokens: bigint;
    stableOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    assetId: string,
    user: AddressLike,
    tokens: BigNumberish,
    stableOut: BigNumberish
  ];
  export type OutputTuple = [
    assetId: string,
    user: string,
    tokens: bigint,
    stableOut: bigint
  ];
  export interface OutputObject {
    assetId: string;
    user: string;
    tokens: bigint;
    stableOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    assetId: string,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [assetId: string, user: string, amount: bigint];
  export interface OutputObject {
    assetId: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    assetId: string,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [assetId: string, user: string, amount: bigint];
  export interface OutputObject {
    assetId: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldClaimedEvent {
  export type InputTuple = [
    assetId: string,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [assetId: string, user: string, amount: bigint];
  export interface OutputObject {
    assetId: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyRegistry;
  waitForDeployment(): Promise<this>;

  interface: PropertyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balances: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  claimAssetYield: TypedContractMethod<[assetId: string], [void], "nonpayable">;

  configureAsset: TypedContractMethod<
    [
      assetId: string,
      maturity: BigNumberish,
      discount: BigNumberish,
      redemption: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  earlyCashOut: TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getAssetDetails: TypedContractMethod<
    [assetId: string],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, bigint, bigint] & {
        totalSupply: bigint;
        tokenPrice: bigint;
        tokensSold: bigint;
        fundingGoal: bigint;
        isActive: boolean;
        maturity: bigint;
        discount: bigint;
        redemption: bigint;
      }
    ],
    "view"
  >;

  getAssetRewards: TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;

  getStakedAssetBalance: TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;

  getUserAssetBalance: TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;

  metas: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint] & {
        maturityTimestamp: bigint;
        discountRate: bigint;
        redemptionRate: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewards: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rwa: TypedContractMethod<[], [string], "view">;

  stakeAsset: TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  staked: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstakeAsset: TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimAssetYield"
  ): TypedContractMethod<[assetId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureAsset"
  ): TypedContractMethod<
    [
      assetId: string,
      maturity: BigNumberish,
      discount: BigNumberish,
      redemption: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyCashOut"
  ): TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssetDetails"
  ): TypedContractMethod<
    [assetId: string],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint, bigint, bigint] & {
        totalSupply: bigint;
        tokenPrice: bigint;
        tokensSold: bigint;
        fundingGoal: bigint;
        isActive: boolean;
        maturity: bigint;
        discount: bigint;
        redemption: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAssetRewards"
  ): TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakedAssetBalance"
  ): TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAssetBalance"
  ): TypedContractMethod<
    [assetId: string, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "metas"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint] & {
        maturityTimestamp: bigint;
        discountRate: bigint;
        redemptionRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rwa"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakeAsset"
  ): TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staked"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeAsset"
  ): TypedContractMethod<
    [assetId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetConfigured"
  ): TypedContractEvent<
    AssetConfiguredEvent.InputTuple,
    AssetConfiguredEvent.OutputTuple,
    AssetConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "EarlyCashOut"
  ): TypedContractEvent<
    EarlyCashOutEvent.InputTuple,
    EarlyCashOutEvent.OutputTuple,
    EarlyCashOutEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;
  getEvent(
    key: "YieldClaimed"
  ): TypedContractEvent<
    YieldClaimedEvent.InputTuple,
    YieldClaimedEvent.OutputTuple,
    YieldClaimedEvent.OutputObject
  >;

  filters: {
    "AssetConfigured(string,uint256,uint256,uint256)": TypedContractEvent<
      AssetConfiguredEvent.InputTuple,
      AssetConfiguredEvent.OutputTuple,
      AssetConfiguredEvent.OutputObject
    >;
    AssetConfigured: TypedContractEvent<
      AssetConfiguredEvent.InputTuple,
      AssetConfiguredEvent.OutputTuple,
      AssetConfiguredEvent.OutputObject
    >;

    "EarlyCashOut(string,address,uint256,uint256)": TypedContractEvent<
      EarlyCashOutEvent.InputTuple,
      EarlyCashOutEvent.OutputTuple,
      EarlyCashOutEvent.OutputObject
    >;
    EarlyCashOut: TypedContractEvent<
      EarlyCashOutEvent.InputTuple,
      EarlyCashOutEvent.OutputTuple,
      EarlyCashOutEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Redeemed(string,address,uint256,uint256)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "Stake(string,address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Unstake(string,address,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;

    "YieldClaimed(string,address,uint256)": TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;
    YieldClaimed: TypedContractEvent<
      YieldClaimedEvent.InputTuple,
      YieldClaimedEvent.OutputTuple,
      YieldClaimedEvent.OutputObject
    >;
  };
}
